from .unet_2d_condition import UNet2DConditionModel
from typing import Any, Dict, List, Optional, Tuple, Union


class UNetWithAdapter(UNet2DConditionModel):

    def __init__(self,
                 sample_size: Optional[int] = None,
                 in_channels: int = 4,
                 out_channels: int = 4,
                 center_input_sample: bool = False,
                 flip_sin_to_cos: bool = True,
                 freq_shift: int = 0,
                 down_block_types: Tuple[str] = ...,
                 mid_block_type: Optional[str] = "UNetMidBlock2DCrossAttn",
                 up_block_types: Tuple[str] = ...,
                 only_cross_attention: Union[bool, Tuple[bool]] = False,
                 block_out_channels: Tuple[int] = ...,
                 layers_per_block: Union[int, Tuple[int]] = 2,
                 downsample_padding: int = 1,
                 mid_block_scale_factor: float = 1,
                 act_fn: str = "silu",
                 norm_num_groups: Optional[int] = 32,
                 norm_eps: float = 0.00001,
                 cross_attention_dim: Union[int, Tuple[int]] = 1280,
                 transformer_depth: Union[int, Tuple[int]] = 1,
                 transformer_layers_per_block: Union[int, Tuple[int]] = 1,
                 encoder_hid_dim: Optional[int] = None,
                 encoder_hid_dim_type: Optional[str] = None,
                 attention_head_dim: Union[int, Tuple[int]] = 8,
                 num_attention_heads: Optional[Union[int, Tuple[int]]] = None,
                 dual_cross_attention: bool = False,
                 use_linear_projection: bool = False,
                 class_embed_type: Optional[str] = None,
                 addition_embed_type: Optional[str] = None,
                 addition_time_embed_dim: Optional[int] = None,
                 num_class_embeds: Optional[int] = None,
                 upcast_attention: bool = False,
                 resnet_time_scale_shift: str = "default",
                 resnet_skip_time_act: bool = False,
                 resnet_out_scale_factor: int = 1,
                 time_embedding_type: str = "positional",
                 time_embedding_dim: Optional[int] = None,
                 time_embedding_act_fn: Optional[str] = None,
                 timestep_post_act: Optional[str] = None,
                 time_cond_proj_dim: Optional[int] = None,
                 conv_in_kernel: int = 3,
                 conv_out_kernel: int = 3,
                 projection_class_embeddings_input_dim: Optional[int] = None,
                 class_embeddings_concat: bool = False,
                 mid_block_only_cross_attention: Optional[bool] = None,
                 cross_attention_norm: Optional[str] = None,
                 addition_embed_type_num_heads=64,
                 tokenizer_adapter=None,
                 tokenizer_adapter_clip=None):
        super().__init__(
            sample_size,
            in_channels,
            out_channels,
            center_input_sample,
            flip_sin_to_cos,
            freq_shift,
            down_block_types,
            mid_block_type,
            up_block_types,
            only_cross_attention,
            block_out_channels,
            layers_per_block,
            downsample_padding,
            mid_block_scale_factor,
            act_fn,
            norm_num_groups,
            norm_eps,
            cross_attention_dim,
            transformer_depth,
            transformer_layers_per_block,
            encoder_hid_dim,
            encoder_hid_dim_type,
            attention_head_dim,
            num_attention_heads,
            dual_cross_attention,
            use_linear_projection,
            class_embed_type,
            addition_embed_type,
            addition_time_embed_dim,
            num_class_embeds,
            upcast_attention,
            resnet_time_scale_shift,
            resnet_skip_time_act,
            resnet_out_scale_factor,
            time_embedding_type,
            time_embedding_dim,
            time_embedding_act_fn,
            timestep_post_act,
            time_cond_proj_dim,
            conv_in_kernel,
            conv_out_kernel,
            projection_class_embeddings_input_dim,
            class_embeddings_concat,
            mid_block_only_cross_attention,
            cross_attention_norm,
            addition_embed_type_num_heads,
            tokenizer_adapter,
            tokenizer_adapter_clip,
        )

    def forward_adapter(self, embeds_unaligned):
        ...
